1/25/13
* Lars made changes to perl-scripts
* We added times stamps in order to prune old clients


we left the code in non-working state. We need to finish pruning
eventually we need to write status_user.pl
we need to work on createClient
create username from clientID 

1/18/13
* figure out logic for deleting obsolete clients
* new users on the system should be created as needed (with a max), not using a fixed number of pre-made users
* userID and clientID should be the same/based on the same random number
* clientID should be checked whether it's already in use
* when is a client obsolete? we need a perl routine that check for resources, m2server will call this script for every user and kill it if the script returns true
* we need to figure out how to use timestamps

1/4/13
* we need to fix upload - seems to be working again
* but interrupt seems broken
* what about prune clients? Are we still touching the sName.txt for this?
* Security: can users upload executable files?
* More reasonable error messages from M2 is needed when user reaches his disk quota

12/14/2012
*we run the server with sudo, and then switch to one of 3 premade users, TODO: make a lot of users and have a mechanism in place that prevents users from getting a userID that's already in use. 
* user currently has access to sName.txt, also open-schroot is probably not going to work any more, this affects /image


11/15/2012
* how to restart the machine
* how can we tackle the security issues we have? 
    * problem: all users are the same user and can kill each other
    * solution: - start m2server as root, 
                - m2server creates users and let schroots run as different users
                - most changes for this would have to be in m2server.m2
                - we can use setpid to a random id, we probably also need to create a directory for that id where they can write to
                - we need to make sure we're using the correct pids (interrupt etc)
* when do we meet again? March (10-17 or 17-22) might be good days! :)

9/13/2012
General:
* unit tests

IPad use:
* "keyboard" with buttons for (){}_#... to make iPad use easier



9/9/2012
use node.js connect()
change logic for startM2()

9/9/2012
We're using a virtual box and run the web server (node.js) in it. The M2's are started in schroots (secure chroots)

9/6/2012
We considered jails in FreeBSD briefly, but decided to use Ubuntu schroots.

8/31/2012
* get it running on Mike's newest machine
* maybe get MacOS 10 Server, can we sandbox it on there? 
* get sandbox running on Lars' laptop

* Security issues: We are now using a startup script setting ulimits. Can these be overwritten from inside the schroot?
* upload a package DONE
* upload tutorials 

* use it in the cloud with more than 1 machine

* Write a paper, maybe JSAG?





4/20/2012
* problem: 2 tabs in the same browser share the same cookie and the same eventStream
* what happens when we quit the browser? 

Timer: 
* start timer when user leaves  DONE
* destroy timer when user with same cookie comes back  DONE
* Can we determine if M2 is currently running a calculation for a client?  "DONE"



Mike: get server ready for May visit

4/17/2012
Do not start a new user every time they leave the page:  DONE
- don't delete clientID right away from clients[] (DONE), use a timer instead  
- Done: we are currently writing to many (dead) clients with ondata, we need to "unlink" previous on data calls first, before assigning them to new eventStreams

Still to do: 
display image not in help box  DONE
cronjob to cleanup /tmp (Maybe Lars?)  DONE
/tmp should be only writable directory in sandbox  DONE
make images work in sandbox and still have security (talk to Dan about allowing allowing restricted M2 to write)

maybe work on Print and Don't reload when briefly navigating away from site
Can we run a non-restricted M2 inside the sandbox and still be secure?  MAYBE



3/22/2012
cleanup loadFiles for jpg
get PID - find user by PID  


3/20/12
app-armor?



Gwyn's suggestions: 
ability to get worksheet uploaded
print
users can start their own server
want to be able to run programs e.g., gfan...  DONE
be able to display jpg files and generate them as in posets package DONE
list of allowed commands  (like gfan etc)
don't delete history on reload in input window  NOT DONE/IMPOSSIBLE
ask David Cook about M2/gap  NOT DONE
test low memory conditions, gracefully telling the user  NOT DONE
lots of users -> issues?  YES
Save input and output windows  NOT DONE
link for reporting issues, asking questions  NOT DONE


3/13/2012
multi-line <code>  DONE


Greg: 
"useful starting code" in Terminal
Get rid of M2 title, put in welcome screen instead
Bug: same browser, different tabs, several M2's in the same output window
help 'command' should open up in tutorial-style css, maybe on the left side? 
Tutorial button on the bottom of the page? 
syntax highlighting and autocompletion (maybe a button not necessarily tab)
Previous and Next should be inside the tutorial screen
re-arrange title, buttons, menu 

3/12/2012
  In general: security
    includes: not serving pages in /etc/...!
              denial of service attack
              running security screening tools (nlmp, or...?)
              https protocol, more secure cookies/session  MOSTLY DONE

  streamlining the M2 schroot:
    limit resources  almost DONE
    ...
  
  server mechanics:
    cron job to restart server, if it dies
    logging of data, who is coming (ip address, OS?)
    kill extraneous M2 processes
    learn about load balancing and reverse proxy server
    remove stale M2's  (time out: after a week, ...)
  server itself:
    at the moment: serving "/" resends index.hmtl and restarts M2.
    would be nice if it didn't do that: it could remember process if cookie is OK.
  
  user authentication
    allowing files on the server? Better persistence, better M2 performance (less limits)

3/7/2012
For version 1: See Mike's list


3/6/12
* deal with viewHelp, how can we display help to users? 
* Navigating through lessons, scroll bar should jump to top of each lesson

2/29/2012
* email Greg
* talk to Lars next week

2/23/2012
- Talking about server pushing data to client rather than client pulling for data

2/21/2012
Get "Next" button working again! - Done
Node.js, chat server example in "Definite Guide to Javascript", Flanagan, p 519, we need Lars to incorporate this into the existing server

Homework due 2/21 - 80% of your final grade!!!
Franzi: convert BeginningMacaulay2 to Tutorial (trunk/Macaulay2/packages/Begin...)
Mike: investigate asynchronous retrieval of M2 output, JS lint, read up on "global" variables in JS

2/17/12
At this point, it's basically functional, we need to clean it up a little bit: 
	- add another tutorial
	- fix help text
	- credits (funding?)
	- generally clean code, get rid of obsolete (?) createMenu() and createMenu2()
	- display title of current tutorial
	- display 
	
	
In the future:	
* we need 
	- load lessons from url
* write content for help text
* need Greg make it prettier
* get rid of constant pulling of data
* iPad (buttons instead of keyboard input)
* save/get our work (via email)
* Stylized way of making a tutorial page, conversion between M2 documentation style and tutorial form 
* resizing
* communicate the text-area size to M2 for correct string formatting or set reasonable default at beginning, printWidth = 80, but figure out what the width should be in advance
* undo feature	( command Z?)
* syntax highlighting
* autocompletion on Tab
* save contents (input and output)
* upload files that will turn into clickable tutorials, notebook style
* Run all commands in the tutorial up to here


2/7/12
* MB Extruder, http://pupunzi.open-lab.com/mb-jquery-components/jquery-mb-extruder/
* we need 
	- show tutorial lessons
	- load lessons
	- load lessons from url
* Strip down extruder files (js and css in root dir), change way menu is getting its content (we have a function for retrieving content, i.e., all H4's, in m2.js, createMenu()
	
	
1/30/12
* final prompts in output terminal
* AJAX-like call to get results from M2 when they're ready instead of pulling every x ms, get a smarter web server
* a little CSS to make it just a little prettier (colors, font, buttons, shadows, offset inside boxes, don't type into output window)
* indexing for tutorials, from here, load tutorials
* second tutorial so we can play with double indexed list
* help button


11/9/11
Adjusting layout, using http://tour.golang.org/ as template


12/10/11
Giving up on Sencha for now (chapter2, sencha*.*)
Going back to index-ipad.html, renaming it to index.html, starting fresher




Sencha Touch: 

* textarea size
* node.js for "pulling" data from the server without draining the battery
* Ajax calls (this should be really easy - really?)
* more buttons
* larger textarea
* lessons
* we want swiping
* table of contents/lesson overview



Use index.html in main directory or index-ipad.html, start the server from inside sockets: 
ruby RubyM2Server.rb

The php scripts that you're using from inside the Javascript files is sockets/M2Client.php and getResults.php. Be careful with different directories ...

-------

* clicking on "send to M2" button should move the cursor to next line
* padding inside lessons

* fix TOC on help page (!)
* fix TOC expand/collapse
* fix the layout :) 
* change M2 output to not be a text area but something with scrollbars
* sendToM2 functional on lesson pages, send everything up to that point
* table of contents: collapse/expand, fix sizes
* help button
* tutorial button
* back button change name
* somehow select font size

* colorization of keywords, comments, and strings


Done :) 
* detect orientation, side by side, over each other
* change titles: "on the web", "interactive" -> remove or change
* take out waiting time
* 2 finger zoom

**Planned Feature List** (some things might be out of date...)
resizing
incorporate input from tutorial
communicate the text-area size to M2 for correct string formatting or set reasonable default at beginning
undo feature	( command Z?)
syntax highlighting
autocompletion on Tab
save contents (input and output)
upload files that will turn into clickable tutorials, notebook style
Run all commands in the tutorial up to here
retrieve newest results right after sending a request and then less frequently

iPad: 
* scroll bars
* math keyboard, or buttons of most needed keys
* move text areas around
* newRing button: k, p, gens
* buttons for variables that are available

Involve Amelia, Frank Moore, Bart Snapp, other undergrad research people to have undergrads use this site, maybe develop lessons, develop a project that can be used with this site? Brandy (Elena?) thought computational algebra, any insight?



**Tutorial**
change structure: Preamble and div's should be in index.html, just load commands (and explanations)
Choice of tutorials to chose from
"run all" button, run selection/line


Use index.html in main directory or index-ipad.html, start the server from inside sockets: 
ruby RubyM2Server.rb

The php scripts that you're using from inside the Javascript files is sockets/M2Client.php and getResults.php. Be careful with different directories ... 


-----

in the cloud
education: for undergrads
why not sage: old version, too complex for simple in-classroom action, 

notebook structure not right format for M2
not suitable for mobile version
"join" sage: our notebooks can be made available through sage as well, for a different kind of users

colorization
